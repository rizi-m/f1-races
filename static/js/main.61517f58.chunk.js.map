{"version":3,"sources":["res/home-text.png","components/navbar/Navbar.js","utils/helper-functions.js","utils/http-requests.js","utils/f1-data.js","components/home/Home.js","components/calendar/Calendar.js","components/standings/Standings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","linkClicked","idx","setState","activeStatuses","state","map","status","current","setCurrentSection","statuses","currentSection","_this2","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","href","Component","countdown","date","time","distance","Date","concat","getTime","days","Math","floor","hours","minutes","getRequest","url","onload","request","XMLHttpRequest","open","responseType","response","send","getData","storeKey","storedData","JSON","parse","localStorage","getItem","data","setItem","stringify","getNewDataIfNeeded","check","latestStadings","nextRaceSeason","nextRaceRound","nextRaceData","MRData","RaceTable","Races","season","round","StandingsTable","parseInt","Home","setRaceInfoText","raceName","circuitName","Circuit","infoText","raceInfo","raceCountdown","now","src","homeText","alt","Calendar","setRaceScheduleData","rows","race","eta","includes","key","scope","Location","country","raceData","year","Standings","setDriverStandings","StandingsLists","DriverStandings","standing","position","Driver","givenName","familyName","Constructors","name","points","wins","driverStandings","setConstructorStandings","console","log","ConstructorStandings","Constructor","constructorStandings","latestConstructorStandings","App","sectionIndex","section","components_home_Home","components_calendar_Calendar","standings_Standings","components_navbar_Navbar","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wQCkDzBC,2BA3Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,YAAc,SAACC,GACbR,EAAKS,SAAS,CACVC,eAAgBV,EAAKW,MAAMD,eAAeE,IAAI,SAACC,EAAQC,GAAT,OAAqBA,IAAYN,EAAM,SAAW,OAEpGR,EAAKD,MAAMgB,kBAAkBP,IAX7B,IAAIQ,EAAW,CAAC,GAAI,GAAI,IAFP,OAGjBA,EAASjB,EAAMkB,gBAAkB,SACjCjB,EAAKW,MAAQ,CACXD,eAAgBM,GALDhB,wEAgBV,IAAAkB,EAAAf,KACP,OACEgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC1JT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BO,GAAG,aAC3CV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACNH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAAcnB,KAAKQ,MAAMD,eAAe,IACnDS,EAAAC,EAAAC,cAAA,KAAGS,QAAS,kBAAMZ,EAAKX,YAAY,IAAIe,UAAU,WAAWS,KAAK,sBAAjE,SAEJZ,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAAcnB,KAAKQ,MAAMD,eAAe,IACnDS,EAAAC,EAAAC,cAAA,KAAGS,QAAS,kBAAMZ,EAAKX,YAAY,IAAIe,UAAU,WAAWS,KAAK,sBAAjE,aAEJZ,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YAAcnB,KAAKQ,MAAMD,eAAe,IACnDS,EAAAC,EAAAC,cAAA,KAAGS,QAAS,kBAAMZ,EAAKX,YAAY,IAAIe,UAAU,WAAWS,KAAK,sBAAjE,yBAlCHC,sCCHd,SAASC,EAAUC,EAAMC,GAC5B,IAEMC,EAFgB,IAAIC,KAAJ,GAAAC,OAAYJ,EAAZ,KAAAI,OAAoBH,IAAQI,WACtC,IAAIF,MAAOE,UAEjBC,EAAOC,KAAKC,MAAMN,EAAQ,OAC1BO,EAAQF,KAAKC,MAAON,EAAQ,MAAT,MACnBQ,EAAUH,KAAKC,MAAON,EAAQ,KAAT,KAC3B,SAAAE,OAAUE,EAAV,MAAAF,OAAmBK,EAAnB,MAAAL,OAA6BM,EAA7B,KCTG,SAASC,EAAWC,EAAKC,GAC5B,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOJ,GACpBE,EAAQG,aAAe,OACvBH,EAAQD,OAAS,kBAAMA,EAAOC,EAAQI,WACtCJ,EAAQK,OCHZ,SAASC,EAAQR,EAAKS,EAAUR,GAC5B,IAAMS,EAAaC,KAAKC,MAAMC,aAAaC,QAAQL,IAChDC,EACCT,EAAOS,GAEPX,EAAWC,EAAK,SAACe,GACbF,aAAaG,QAAQP,EAAUE,KAAKM,UAAUF,IAC9Cd,EAAOc,KAKnB,SAASG,EAAmBlB,EAAKS,EAAUU,EAAOlB,GAC9C,IAAMS,EAAaC,KAAKC,MAAMC,aAAaC,QAAQL,KAC9CC,GAAcS,EAAMT,GACrBX,EAAWC,EAAK,SAACe,GACbF,aAAaG,QAAQP,EAAUE,KAAKM,UAAUF,IAC9Cd,EAAOc,KAGXd,EAAOS,GAKR,SAASU,EAAepB,EAAKS,EAAUR,GAC1C,IACIoB,EACAC,EAFEC,EAAeZ,KAAKC,MAAMC,aAAaC,QAAQ,cAGjDS,IACAF,EAAiBE,EAAaC,OAAOC,UAAUC,MAAM,GAAGC,OACxDL,EAAgBC,EAAaC,OAAOC,UAAUC,MAAM,GAAGE,OAE3DV,EACIlB,EACAS,EACA,SAACM,GAAD,OAAUQ,GAAgBR,EAAKS,OAAOK,eAAeF,QAAUN,GAAmBS,SAASf,EAAKS,OAAOK,eAAeD,OAAS,EAAKN,GACpIrB,OCQO8B,cAtCb,SAAAA,EAAY9E,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0E,IACjB7E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4E,GAAAvE,KAAAH,KAAMJ,KAOR+E,gBAAkB,SAACjB,GACjB,IAAMa,EAAQb,EAAKS,OAAOC,UAAUG,MAC9BxC,EAAO2B,EAAKS,OAAOC,UAAUC,MAAM,GAAGtC,KACtC6C,EAAWlB,EAAKS,OAAOC,UAAUC,MAAM,GAAGO,SAC1C5C,EAAO0B,EAAKS,OAAOC,UAAUC,MAAM,GAAGrC,KACtC6C,EAAcnB,EAAKS,OAAOC,UAAUC,MAAM,GAAGS,QAAQD,YACrDE,EAAQ,GAAA5C,OAAMoC,EAAN,OAAApC,OAAiByC,EAAjB,MAAAzC,OAA8B0C,EAA9B,MAAA1C,OAA8CJ,EAA9C,OAAAI,OAAwDH,GACtEnC,EAAKS,SAAS,CACV0E,SAAUD,EACVE,cAAgBnD,EAAUC,EAAMC,MAfpCnC,EAAKW,MAAQ,CACTwE,SAAW,GACXC,cAAgB,IAJHpF,mFDuDjBgE,EACI,8CACA,YACA,SAACH,GAAD,OAAW,IAAIxB,KAAKwB,EAAKS,OAAOC,UAAUC,MAAM,GAAGtC,MAASG,KAAKgD,OCpC5DlF,KAAK2E,kDAId,OACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAagE,IAAKC,IAAUC,IAAI,cAEnDrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAenB,KAAKQ,MAAMwE,SAAzC,IAAoDhE,EAAAC,EAAAC,cAAA,WAApD,IAA4DlB,KAAKQ,MAAMyE,cAAvE,aAjCWpD,aC8EJyD,oBA7Eb,SAAAA,EAAY1F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsF,IACjBzF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwF,GAAAnF,KAAAH,KAAMJ,KAOR2F,oBAAsB,SAAC7B,GACrB,IAAM8B,EAAO9B,EAAKS,OAAOC,UAAUC,MAAM5D,IAAI,SAACgF,GAE5C,IAAIC,EAAM5D,EAAU2D,EAAK1D,KAAM0D,EAAKzD,MAEpC,OADA0D,EAAMA,EAAIC,SAAS,KAAO,OAASD,EAEjC1E,EAAAC,EAAAC,cAAA,MAAI0E,IAAKH,EAAKlB,OACZvD,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAOJ,EAAKlB,OACtBvD,EAAAC,EAAAC,cAAA,UAAKuE,EAAKb,UACV5D,EAAAC,EAAAC,cAAA,UAAKuE,EAAK1D,MACVf,EAAAC,EAAAC,cAAA,UAAKuE,EAAKzD,MACVhB,EAAAC,EAAAC,cAAA,UAAKuE,EAAKX,QAAQD,aAClB7D,EAAAC,EAAAC,cAAA,UAAKuE,EAAKX,QAAQgB,SAASC,SAC3B/E,EAAAC,EAAAC,cAAA,UAAKwE,MAKX7F,EAAKS,SAAS,CACZ0F,SAAUR,KA3BK3F,EA+BnB8E,gBAAkB,SAACjB,GACjB,IAAMa,EAAQb,EAAKS,OAAOC,UAAUG,MAC9BxC,EAAO2B,EAAKS,OAAOC,UAAUC,MAAM,GAAGtC,KACtC6C,EAAWlB,EAAKS,OAAOC,UAAUC,MAAM,GAAGO,SAC1C5C,EAAO0B,EAAKS,OAAOC,UAAUC,MAAM,GAAGrC,KACtC6C,EAAcnB,EAAKS,OAAOC,UAAUC,MAAM,GAAGS,QAAQD,YACrDE,EAAQ,GAAA5C,OAAMoC,EAAN,OAAApC,OAAiByC,EAAjB,MAAAzC,OAA8B0C,EAA9B,MAAA1C,OAA8CJ,EAA9C,OAAAI,OAAwDH,GACtEnC,EAAKS,SAAS,CACV0E,SAAUD,EACVE,cAAgBnD,EAAUC,EAAMC,MAtCpCnC,EAAKW,MAAQ,CACTwE,SAAW,GACXC,cAAgB,IAJHpF,mFFmCd,IAAsBoG,EAAMrD,EAANqD,EEUZ,KFVkBrD,EEUZ5C,KAAKuF,oBFTxBpC,EAAO,6BAAAhB,OAA8B8D,EAA9B,0BAAA9D,OAA4D8D,GAAQrD,oCEa3E,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kCACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,SACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,aACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,QACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,QACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,WACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,YACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,eAGJ7E,EAAAC,EAAAC,cAAA,aACKlB,KAAKQ,MAAMwF,qBApETnE,cCoFRqE,cApFb,SAAAA,EAAYtG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkG,IACjBrG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoG,GAAA/F,KAAAH,KAAMJ,KAQRuG,mBAAqB,SAACzC,GACpB,IAAM8B,EAAO9B,EAAKS,OAAOK,eAAe4B,eAAe,GAAGC,gBAAgB5F,IAAI,SAAA6F,GAC5E,OACEtF,EAAAC,EAAAC,cAAA,MAAI0E,IAAKU,EAASC,UAChBvF,EAAAC,EAAAC,cAAA,UAAKoF,EAASC,UACdvF,EAAAC,EAAAC,cAAA,UAAKoF,EAASE,OAAOC,UAAY,IAAMH,EAASE,OAAOE,YACvD1F,EAAAC,EAAAC,cAAA,UAAKoF,EAASK,aAAa,GAAGC,MAC9B5F,EAAAC,EAAAC,cAAA,UAAKoF,EAASO,QACd7F,EAAAC,EAAAC,cAAA,UAAKoF,EAASQ,SAIpBjH,EAAKS,SAAS,CACZyG,gBAAiBvB,EACjBS,KAAMvC,EAAKS,OAAOK,eAAeF,UAvBlBzE,EA2BnBmH,wBAA0B,SAACtD,GACzBuD,QAAQC,IAAIxD,GACZ,IAAM8B,EAAO9B,EAAKS,OAAOK,eAAe4B,eAAe,GAAGe,qBAAqB1G,IAAI,SAAA6F,GACjF,OACEtF,EAAAC,EAAAC,cAAA,MAAI0E,IAAKU,EAASC,UAChBvF,EAAAC,EAAAC,cAAA,UAAKoF,EAASC,UACdvF,EAAAC,EAAAC,cAAA,UAAKoF,EAASc,YAAYR,MAC1B5F,EAAAC,EAAAC,cAAA,UAAKoF,EAASO,QACd7F,EAAAC,EAAAC,cAAA,UAAKoF,EAASQ,SAIpBjH,EAAKS,SAAS,CACZ+G,qBAAsB7B,KAtCxB3F,EAAKW,MAAQ,CACXuG,gBAAiB,GACjBM,qBAAsB,GACtBpB,KAAM,IALSpG,mFHmEjBkE,EAAe,8DAA+D,0BGtBxD/D,KAAKmG,oBHyBxB,SAAoCvD,GACvCmB,EAAe,mEAAoE,+BAAgCnB,GGzBnH0E,CAA2BtH,KAAKgH,0DAIhC,OACEhG,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,aACNV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,YACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,QACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,QACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,UACA7E,EAAAC,EAAAC,cAAA,MAAI2E,MAAM,OAAV,UAGJ7E,EAAAC,EAAAC,cAAA,aAAQlB,KAAKQ,MAAMuG,mBAGvB/F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBAGFF,EAAAC,EAAAC,cAAA,aAAQlB,KAAKQ,MAAM6G,gCA9EPxF,aCuCT0F,cAlCb,SAAAA,EAAY3H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuH,IACjB1H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyH,GAAApH,KAAAH,KAAMJ,KAORgB,kBAAoB,SAAC4G,GACnB3H,EAAKS,SAAS,CACZQ,eAAgB0G,KARlB3H,EAAKW,MAAQ,CACXM,eAAgB,GAHDjB,wEAejB,IAAI4H,EACJ,OAAQzH,KAAKQ,MAAMM,gBACjB,KAAK,EAAG2G,EAAUzG,EAAAC,EAAAC,cAACwG,EAAD,MAAS,MAC3B,KAAK,EAAGD,EAAUzG,EAAAC,EAAAC,cAACyG,EAAD,MAAa,MAC/B,KAAK,EAAGF,EAAUzG,EAAAC,EAAAC,cAAC0G,EAAD,MAAc,MAChC,QAASH,EAAUzG,EAAAC,EAAAC,cAAA,qBAErB,OAGEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2G,EAAD,CAAQ/G,eAAgBd,KAAKQ,MAAMM,eAAgBF,kBAAmBZ,KAAKY,oBAC1E6G,UA7BSK,IAAMjG,WCKJkG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrH,EAAAC,EAAAC,cAACoH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61517f58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home-text.621bd5e2.png\";","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport './Navbar.css';\n\n\nclass Navbar extends Component {\n\n  constructor(props) {\n    super(props);\n    let statuses = [\"\", \"\", \"\"];\n    statuses[props.currentSection] = \"active\";\n    this.state = {\n      activeStatuses: statuses\n    }\n  }\n\n  linkClicked = (idx) => { \n    this.setState({\n        activeStatuses: this.state.activeStatuses.map((status, current) => current === idx ? \"active\" : \"\")\n    });\n    this.props.setCurrentSection(idx);\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n                    <li className={\"nav-item \" + this.state.activeStatuses[0]}>\n                        <a onClick={() => this.linkClicked(0)} className=\"nav-link\" href=\"javascript:void(0)\">Home</a>\n                    </li>\n                    <li className={\"nav-item \" + this.state.activeStatuses[1]}>\n                        <a onClick={() => this.linkClicked(1)} className=\"nav-link\" href=\"javascript:void(0)\">Calendar</a>\n                    </li>\n                    <li className={\"nav-item \" + this.state.activeStatuses[2]}>\n                        <a onClick={() => this.linkClicked(2)} className=\"nav-link\" href=\"javascript:void(0)\">Standings</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\n\nexport default Navbar;","\n\nexport function countdown(date, time) {\n    const countdownDate = new Date(`${date}T${time}`).getTime();\n    const now = new Date().getTime();\n    const distance = countdownDate - now;\n    const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    return `${days}d ${hours}h ${minutes}m`;\n}","export function getRequest(url, onload) {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.responseType = 'json';\n    request.onload = () => onload(request.response);\n    request.send();\n};\n\n\n","import { getRequest } from './http-requests';\n\nfunction getData(url, storeKey, onload) {\n    const storedData = JSON.parse(localStorage.getItem(storeKey));\n    if(storedData) {\n        onload(storedData);\n    } else {\n        getRequest(url, (data) => {\n            localStorage.setItem(storeKey, JSON.stringify(data));\n            onload(data);\n        });\n    }\n}\n\nfunction getNewDataIfNeeded(url, storeKey, check, onload) {\n    const storedData = JSON.parse(localStorage.getItem(storeKey));\n    if (!storedData || check(storedData)) {\n        getRequest(url, (data) => {\n            localStorage.setItem(storeKey, JSON.stringify(data));\n            onload(data);\n        });\n    } else {\n        onload(storedData);\n    }\n}\n\n\nexport function latestStadings(url, storeKey, onload) {\n    const nextRaceData = JSON.parse(localStorage.getItem('next-race'));\n    let nextRaceSeason;\n    let nextRaceRound;\n    if (nextRaceData) {\n        nextRaceSeason = nextRaceData.MRData.RaceTable.Races[0].season;\n        nextRaceRound = nextRaceData.MRData.RaceTable.Races[0].round;\n    }\n    getNewDataIfNeeded(\n        url,\n        storeKey,\n        (data) => nextRaceData && data.MRData.StandingsTable.season == nextRaceSeason && (parseInt(data.MRData.StandingsTable.round) + 1) < nextRaceRound,\n        onload\n    );\n}\n\nexport function raceSchedule(year, onload) {\n    getData(`https://ergast.com/api/f1/${year}.json`, `race-schedule-${year}`, onload);\n}\n\nexport function qualifyingResults(year, race, onload) {\n    getData(\n        `https://ergast.com/api/f1/${year}/${race}/qualifying.json`, \n        `qualifying-results-${year}-${race}`, \n        onload\n    );\n}\n\nexport function raceResults(year, race, onload) {\n    getData(\n        `https://ergast.com/api/f1/${year}/${race}/results.json`, \n        `race-results-${year}-${race}`, \n        onload\n    );\n}\n\nexport function nextRace(onload) {\n    getNewDataIfNeeded(\n        'https://ergast.com/api/f1/current/next.json',\n        'next-race',\n        (data) => (new Date(data.MRData.RaceTable.Races[0].date)) < Date.now(),\n        onload\n    );\n}\n\nexport function latestDriversStadings(onload) {\n    latestStadings('https://ergast.com/api/f1/current/last/driverStandings.json', 'latest-driver-standings', onload);\n}\n\nexport function latestConstructorStandings(onload) {\n    latestStadings('https://ergast.com/api/f1/current/last/constructorStandings.json', 'latest-constructor-standings', onload);\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport './Home.css';\nimport homeText from '../../res/home-text.png';\nimport { countdown } from '../../utils/helper-functions';\nimport { nextRace } from '../../utils/f1-data';\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        raceInfo : \"\",\n        raceCountdown : \"\"\n      };\n  }\n\n  setRaceInfoText = (data) => {\n    const round = data.MRData.RaceTable.round;\n    const date = data.MRData.RaceTable.Races[0].date;\n    const raceName = data.MRData.RaceTable.Races[0].raceName;\n    const time = data.MRData.RaceTable.Races[0].time;\n    const circuitName = data.MRData.RaceTable.Races[0].Circuit.circuitName;\n    const infoText = `${round} - ${raceName}, ${circuitName}, ${date} - ${time}`\n    this.setState({\n        raceInfo: infoText,\n        raceCountdown : countdown(date, time)\n    });\n  }\n\n  componentDidMount() {\n    nextRace(this.setRaceInfoText);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"text-center\">\n            <img className=\"home-image\" src={homeText} alt=\"F1 Races\" />\n        </div>\n        <div className=\"next-race\" >{ this.state.raceInfo } <br/> { this.state.raceCountdown } </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Home;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport { raceSchedule } from '../../utils/f1-data';\nimport { countdown } from '../../utils/helper-functions';\nimport './Calendar.css';\n\nclass Calendar extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        raceInfo : \"\",\n        raceCountdown : \"\"\n      };\n  }\n\n  setRaceScheduleData = (data) => {\n    const rows = data.MRData.RaceTable.Races.map((race) => {\n      //const date = new Date(`${race.date}T${race.time}`).getTime();\n      let eta = countdown(race.date, race.time);\n      eta = eta.includes(\"-\") ? \"DONE\" : eta;\n      return (\n        <tr key={race.round}>\n          <th scope=\"row\">{race.round}</th>\n          <td>{race.raceName}</td>\n          <td>{race.date}</td>\n          <td>{race.time}</td>\n          <td>{race.Circuit.circuitName}</td>\n          <td>{race.Circuit.Location.country}</td>\n          <td>{eta}</td>\n        </tr>\n      )\n    });\n\n    this.setState({\n      raceData: rows\n    });\n  }\n\n  setRaceInfoText = (data) => {\n    const round = data.MRData.RaceTable.round;\n    const date = data.MRData.RaceTable.Races[0].date;\n    const raceName = data.MRData.RaceTable.Races[0].raceName;\n    const time = data.MRData.RaceTable.Races[0].time;\n    const circuitName = data.MRData.RaceTable.Races[0].Circuit.circuitName;\n    const infoText = `${round} - ${raceName}, ${circuitName}, ${date} - ${time}`\n    this.setState({\n        raceInfo: infoText,\n        raceCountdown : countdown(date, time)\n    });\n  }\n\n  componentDidMount() {\n    raceSchedule(2019, this.setRaceScheduleData);\n  }\n\n  render() {\n    return (\n      <div className=\"component\">\n        <div className=\"table-container\"> \n          <div className=\"table-responsive\">\n              <table className=\"table table-hover custom-table\">\n                <thead className=\"table-header\">\n                  <tr>\n                    <th scope=\"col\">Round</th>\n                    <th scope=\"col\">Race Name</th>\n                    <th scope=\"col\">Date</th>\n                    <th scope=\"col\">Time</th>\n                    <th scope=\"col\">Circuit</th>\n                    <th scope=\"col\">Location</th>\n                    <th scope=\"col\">Countdown</th>\n                  </tr>\n                </thead>\n                <tbody>\n                    {this.state.raceData}\n                </tbody>\n              </table>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Calendar;","import React, { Component } from 'react';\nimport { latestDriversStadings, latestConstructorStandings } from '../../utils/f1-data';\nimport '../calendar/Calendar.css';\n\nclass Standings extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      driverStandings: \"\",\n      constructorStandings: \"\",\n      year: \"\"\n    }\n  }\n\n  setDriverStandings = (data) => {\n    const rows = data.MRData.StandingsTable.StandingsLists[0].DriverStandings.map(standing => {\n      return (\n        <tr key={standing.position}>\n          <td>{standing.position}</td>\n          <td>{standing.Driver.givenName + \" \" + standing.Driver.familyName}</td>\n          <td>{standing.Constructors[0].name}</td>\n          <td>{standing.points}</td>\n          <td>{standing.wins}</td>\n        </tr>\n      );\n    });\n    this.setState({\n      driverStandings: rows,\n      year: data.MRData.StandingsTable.season\n    });\n  }\n\n  setConstructorStandings = (data) => {\n    console.log(data);\n    const rows = data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings.map(standing => {\n      return (\n        <tr key={standing.position}>\n          <td>{standing.position}</td>\n          <td>{standing.Constructor.name}</td>\n          <td>{standing.points}</td>\n          <td>{standing.wins}</td>\n        </tr>\n      );\n    });\n    this.setState({\n      constructorStandings: rows\n    });\n  }\n\n  componentDidMount() {\n    latestDriversStadings(this.setDriverStandings);\n    latestConstructorStandings(this.setConstructorStandings);\n  }\n  \n  render() {\n    return (\n      <div id=\"component\">\n        <div className=\"table-container\">\n        <table className=\"table table-hover custom-table\">\n            <thead className=\"table-header\">\n              <tr>\n                <th scope=\"col\">Position</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Team</th>\n                <th scope=\"col\">Points</th>\n                <th scope=\"col\">Wins</th>\n              </tr>\n            </thead>\n            <tbody>{this.state.driverStandings}</tbody>\n          </table>\n        </div>\n        <div className=\"table-container\">\n        <table className=\"table table-hover custom-table\">\n            <thead className=\"table-header\">\n              <tr>\n              <th>Position</th>\n              <th>Team</th>\n              <th>Points</th>\n              <th>Wins</th>\n              </tr>\n            </thead>\n            <tbody>{this.state.constructorStandings}</tbody>\n          </table>\n        </div>\n      </div>\n    );\n    }\n  }\n\nexport default Standings;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar/Navbar';\nimport Home from './components/home/Home';\nimport Calendar from './components/calendar/Calendar';\nimport Standings from './components/standings/Standings';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSection: 0\n    };\n    \n  }\n\n  setCurrentSection = (sectionIndex) => {\n    this.setState({\n      currentSection: sectionIndex\n    });\n  }\n\n  render() {\n    let section;\n    switch (this.state.currentSection) {\n      case 0: section = <Home/>; break;\n      case 1: section = <Calendar/>; break;\n      case 2: section = <Standings/>; break;\n      default: section = <h1>NOTHING</h1>;\n    }\n    return (\n    \n\n      <div className=\"App\">\n        <Navbar currentSection={this.state.currentSection} setCurrentSection={this.setCurrentSection}/>\n        {section}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}